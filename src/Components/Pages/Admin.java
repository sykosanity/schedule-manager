/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Components.Pages;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.HashMap;
import Database.Database;
import java.awt.Dimension;
import java.text.DecimalFormat;
import java.util.*;
import javax.swing.BorderFactory;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author USER
 */
public class Admin extends javax.swing.JPanel {

    /**
     * Creates new form Admin
     */
    public Admin() {
        initComponents();
//        setLayout(new java.awt.BorderLayout());
        this.setPreferredSize(new Dimension(1050, 720));

        populateTableWithAccounts();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainPanel = new raven.crazypanel.CrazyPanel();
        ScrollPane = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        TabPanel = new raven.crazypanel.CrazyPanel();
        AddButton = new javax.swing.JButton();
        UpdateButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        SearchBar = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        MainPanel.setBackground(new java.awt.Color(51, 255, 51));
        MainPanel.setLayout(null);

        jTable1.setBackground(new java.awt.Color(255, 255, 255));
        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(4, 76, 172)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Name", "Rank", "User_name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ScrollPane.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(200);
        }

        MainPanel.add(ScrollPane);
        ScrollPane.setBounds(20, 140, 980, 406);

        TabPanel.setBackground(new java.awt.Color(255, 255, 255));
        TabPanel.setPreferredSize(new java.awt.Dimension(1019, 34));
        TabPanel.setLayout(null);

        AddButton.setText("Add");
        TabPanel.add(AddButton);
        AddButton.setBounds(730, 10, 49, 28);

        UpdateButton.setText("Update");
        TabPanel.add(UpdateButton);
        UpdateButton.setBounds(800, 10, 68, 28);

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });
        TabPanel.add(DeleteButton);
        DeleteButton.setBounds(890, 10, 64, 28);

        SearchBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBarActionPerformed(evt);
            }
        });
        TabPanel.add(SearchBar);
        SearchBar.setBounds(0, 10, 170, 28);

        MainPanel.add(TabPanel);
        TabPanel.setBounds(20, 90, 980, 40);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1050, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void SearchBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchBarActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int rowCount = model.getRowCount();
        List<Integer> rowsToDelete = new ArrayList<>();
        StringBuilder selectedUsers = new StringBuilder();

        // fnd all checked rows
        for (int i = 0; i < rowCount; i++) {
            Boolean isChecked = (Boolean) model.getValueAt(i, 0);
            if (isChecked != null && isChecked) {
                rowsToDelete.add(i);
                selectedUsers.append("- ").append(model.getValueAt(i, 1)).append("\n");
            }
        }

        if (rowsToDelete.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "No user selected for deletion.");
            return;
        }

        //wraning dialog
        int response = javax.swing.JOptionPane.showConfirmDialog(
                this,
                "Are you sure you want to delete the following users?\n\n" + selectedUsers,
                "Confirm Deletion",
                javax.swing.JOptionPane.YES_NO_OPTION,
                javax.swing.JOptionPane.WARNING_MESSAGE
        );

        //delete users after confirmed
        if (response == javax.swing.JOptionPane.YES_OPTION) {
            for (int i = rowsToDelete.size() - 1; i >= 0; i--) {
                int rowIndex = rowsToDelete.get(i);
                String userName = (String) model.getValueAt(rowIndex, 3);  // getusername from the row

                //deletes the selected user from the database method
                removeUserFromDatabase(userName);

                model.removeRow(rowIndex); //remove the row from the table
            }
            System.out.println("Deleted users:\n" + selectedUsers);
        } else {
            System.out.println("Deletion cancelled.");
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed
    
    private void populateTableWithAccounts() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        // Clear the table first
        model.setRowCount(0);

        // Populate table with accounts from the database
        for (HashMap<String, String> user : Database.getAccounts()) {
            model.addRow(new Object[]{
                false, 
                user.get("full_name"),
                user.get("rank"),
                user.get("user_name")
            });
        }
    }

    private void removeUserFromDatabase(String userName) {
        try (Connection connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/schedule_manager_db", "root", "")) {
            String deleteQuery = "DELETE FROM accounts WHERE user_name = ?";
            PreparedStatement statement = connection.prepareStatement(deleteQuery);
            statement.setString(1, userName);
            statement.executeUpdate();

            // get data after deletion
            Database.initDatabase();
            populateTableWithAccounts(); // new table wis updated data

            System.out.println("User " + userName + " deleted from database.");
        } catch (SQLException e) {
            System.out.println("Error deleting user from database: " + e.getMessage());
        }
    }

    private double getAmount(int from, int to) {
        Random ran = new Random();
        return (ran.nextInt(to - from) + from) * ran.nextDouble();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton DeleteButton;
    private raven.crazypanel.CrazyPanel MainPanel;
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JTextField SearchBar;
    private raven.crazypanel.CrazyPanel TabPanel;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
